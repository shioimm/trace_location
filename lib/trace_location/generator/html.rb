# frozen_string_literal: true
require 'coderay'

module TraceLocation
  module Generator
    class Html < Base # :nodoc:
      def initialize(events, return_value, options)
        super
        @current_dir = ::TraceLocation.config.current_dir
        @dest_dir    = options.fetch(:dest_dir) { ::TraceLocation.config.dest_dir }
        @current     = Time.now
        @filename    = "trace_location-#{@current.strftime('%Y%m%d%H%m%s')}.html"
        @file_path   = File.join(@dest_dir, @filename)
      end

      def generate
        setup_dir
        create_file
        $stdout.puts "Created at #{file_path}"
      end

      private

      attr_reader :events, :return_value, :current_dir, :dest_dir, :current, :filename, :file_path

      def setup_dir
        FileUtils.mkdir_p(dest_dir)
      end

      def create_file
        File.open(file_path, 'wb+') do |io|
          io.write <<~HTML
            <!DOCTYPE html>
            <html>
              <head>
                <title>Generated by trace_location at #{current}</title>
                <style>
                  body {
                    background-color: #fff;
                    color: #333;
                    margin: 33px;
                    font-family: verdana, arial, helvetica, sans-serif;
                    line-height: 18px;
                  }
                  .area {
                    margin: 48px 0px;
                  }
                  .code {
                    font-size: 18px;
                    line-height: 20px;
                    background-color: #f5f5f5;
                    padding: 12px 18px;
                    border-radius: 4px;
                  }
                </style>
              </head>
              <body>
                <p>Generated by <a href='https://github.com/yhirano55/trace_location'>trace_location at #{current}</a></p>

          HTML

          events.select(&:call?).map do |e|
            path = e.path.to_s.gsub(%r{#{current_dir}/}, '')
            caller_path = e.caller_path.to_s.gsub(%r{#{current_dir}/}, '')
            code = CodeRay.scan(e.source, :ruby).div

            io.write <<~HTML
                  <div class='area'>
                    <h3>#{path}:#{e.lineno}</h3>
                    <p>▶︎ called from #{caller_path}:#{e.caller_lineno}</p>
                    #{code}
                  </div>
                </body>
              </html>
            HTML
          end
        end
      end
    end
  end
end
